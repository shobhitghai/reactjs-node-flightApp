(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Define Namespace
(function() {
   window.app = {};
}).call(this);


(function() {
    app.util = function(){
        console.log("hello")
    }
})(app);

var Dropdown = React.createClass({displayName: "Dropdown",
  getInitialState: function() {
  	this.cityList = [];

    return {
      cities : '',
      selectedCity: this.props.data.defaultText
    };
  },

  componentDidMount: function() {
  	var self = this; 
    $.ajax({
    	url: self.props.data.fetchUrl,
    	success: function(data){
    		self.setState({
    			cities: data
    		});
    	}
    });
  },

  citySelectionHandler: function(e){
  	var selectedText = $(e.target).text();
  	this.setState({
  		selectedCity: selectedText
  	});
  },

  render: function() {
  	if(!this.cityList.length){
		for(var i = 0;  i < this.state.cities.length; i++ ){
  			this.cityList.push(React.createElement("li", {key: i, onClick: this.citySelectionHandler}, React.createElement("a", {href: "javascript:void(0)"}, this.state.cities[i])));
	  	}
  	}
  	
    return (
    	React.createElement("div", {className: "dropdown"}, 
            React.createElement("button", {className: "btn btn-default dropdown-toggle", type: "button", id: "dropdownMenu1", "data-toggle": "dropdown"}, 
                this.state.selectedCity, 
                React.createElement("span", {className: "caret"})
            ), 
            React.createElement("ul", {className: "dropdown-menu"}, 
                this.cityList
            )
        )
    );
  }
});


var FlightData = React.createClass({displayName: "FlightData",
	getInitialState: function(){
		this.data = {};

		return {
			isData: false
		}
	},
  	updateTable: function(data){
  		this.data = data
  	},
	render: function(){
		var table =''; 

		var rows = [];

		for(var i = 0;  i < this.data.length; i++ ){
  			rows.push(
  				React.createElement("tr", {key: i}, 
	  				React.createElement("td", null, this.data[i].originCity + "-" + this.data[i].departureCity), 
					React.createElement("td", null, this.data[i].provider + " " + this.data[i].flightNumber), 
					React.createElement("td", null, this.data[i].duration + " hr"), 
					React.createElement("td", null, this.data[i].originTime), 
					React.createElement("td", null, "Rs. " + this.data[i].ticketPrice)
				)
  			);
	  	}

		if(this.state.isData){
			table = (
				React.createElement("table", {className: "table table-hover"}, 
					React.createElement("thead", null, 
						React.createElement("tr", null, 
					 		React.createElement("th", null, "From - To"), 
					 		React.createElement("th", null, "Flight Name"), 
					 		React.createElement("th", null, "Duration (hrs)"), 
					 		React.createElement("th", null, "Origin Time"), 
					 		React.createElement("th", null, "Price")

						)
					), 
					React.createElement("tbody", null, 
							rows
					)
				)
			);
		}


		return ( 
			React.createElement("div", null, 
				table
			)
		)
	}
})


var BookingWindow = React.createClass({displayName: "BookingWindow",
	getInitialState: function(){
		this.originCityOption = {
			fetchUrl: "/getCityList",
			defaultText: "choose origin"
		};

		this.destinationCityOption = {
			fetchUrl: "/getCityList",
			defaultText: "choose destination"
		};

		return null;
	},

	fetchFlight: function(){
		var self = this;
		$.ajax({
    		url: '/getFlightDetails',
    		data: {
    			originCity: this.refs.originDD.state.selectedCity,
    			departureCity: this.refs.destinationDD.state.selectedCity
    		},
    		success: function(data){
	    		var data = $.parseJSON(data);

	    		if(data){
		    		self.refs.flightTable.updateTable(data);
		    		self.refs.flightTable.setState({
	    				isData: true
		    		});
	    		}
	    	}
	    });
	},
	
	render: function(){
		return (
			React.createElement("span", null, 
				React.createElement(Dropdown, {key: "0", ref: "originDD", data: this.originCityOption}), 
				React.createElement(Dropdown, {key: "1", ref: "destinationDD", data: this.destinationCityOption}), 
	            React.createElement("button", {className: "btn btn-primary", onClick: this.fetchFlight, type: "button"}, "Submit"), 
	            React.createElement(FlightData, {ref: "flightTable"})
			)
		)
	}
});

ReactDOM.render(
  React.createElement(BookingWindow, null),
  $('#wrapper')[0]
);

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9ncnVudC1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvc2hvYmhpdGdoYWkvRGVza3RvcC9jcm9zc2xpbmsvcmVhY3QtZmxpZ2h0YXBwL3B1YmxpYy9qcy9jb21wb25lbnRzL2FwcC5qc3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQSxtQkFBbUI7QUFDbkIsQ0FBQyxXQUFXLENBQUM7R0FDVixNQUFNLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQztBQUNuQixDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2Q7O0FBRUEsQ0FBQyxXQUFXLENBQUM7SUFDVCxHQUFHLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQztRQUNsQixPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQztLQUN2QjtBQUNMLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQzs7QUFFUixJQUFJLDhCQUE4Qix3QkFBQTtFQUNoQyxlQUFlLEVBQUUsV0FBVyxDQUFDO0FBQy9CLEdBQUcsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7O0lBRWxCLE9BQU87TUFDTCxNQUFNLEdBQUcsRUFBRTtNQUNYLFlBQVksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXO0tBQzFDLENBQUM7QUFDTixHQUFHOztFQUVELGlCQUFpQixFQUFFLFdBQVcsQ0FBQztHQUM5QixJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7SUFDZixDQUFDLENBQUMsSUFBSSxDQUFDO0tBQ04sR0FBRyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVE7S0FDN0IsT0FBTyxFQUFFLFNBQVMsSUFBSSxDQUFDLENBQUM7TUFDdkIsSUFBSSxDQUFDLFFBQVEsQ0FBQztPQUNiLE1BQU0sRUFBRSxJQUFJO09BQ1osQ0FBQyxDQUFDO01BQ0g7S0FDRCxDQUFDLENBQUM7QUFDUCxHQUFHOztFQUVELG9CQUFvQixFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUM7R0FDakMsSUFBSSxZQUFZLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztHQUN0QyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ2IsWUFBWSxFQUFFLFlBQVk7SUFDMUIsQ0FBQyxDQUFDO0FBQ04sR0FBRzs7RUFFRCxNQUFNLEVBQUUsV0FBVyxDQUFDO0dBQ25CLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztFQUMxQixJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO0tBQ2hELElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLG9CQUFBLElBQUcsRUFBQSxDQUFBLENBQUMsR0FBQSxFQUFHLENBQUUsQ0FBQyxFQUFDLENBQUMsT0FBQSxFQUFPLENBQUUsSUFBSSxDQUFDLG9CQUFzQixDQUFBLEVBQUEsb0JBQUEsR0FBRSxFQUFBLENBQUEsQ0FBQyxJQUFBLEVBQUksQ0FBQyxvQkFBcUIsQ0FBQSxFQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBTSxDQUFLLENBQUEsQ0FBQyxDQUFDO0tBQ2pJO0FBQ0wsSUFBSTs7SUFFQTtLQUNDLG9CQUFBLEtBQUksRUFBQSxDQUFBLENBQUMsU0FBQSxFQUFTLENBQUMsVUFBVyxDQUFBLEVBQUE7WUFDbkIsb0JBQUEsUUFBTyxFQUFBLENBQUEsQ0FBQyxTQUFBLEVBQVMsQ0FBQyxpQ0FBQSxFQUFpQyxDQUFDLElBQUEsRUFBSSxDQUFDLFFBQUEsRUFBUSxDQUFDLEVBQUEsRUFBRSxDQUFDLGVBQUEsRUFBZSxDQUFDLGFBQUEsRUFBVyxDQUFDLFVBQVcsQ0FBQSxFQUFBO2dCQUN2RyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBQztnQkFDekIsb0JBQUEsTUFBSyxFQUFBLENBQUEsQ0FBQyxTQUFBLEVBQVMsQ0FBQyxPQUFRLENBQU8sQ0FBQTtZQUMxQixDQUFBLEVBQUE7WUFDVCxvQkFBQSxJQUFHLEVBQUEsQ0FBQSxDQUFDLFNBQUEsRUFBUyxDQUFDLGVBQWdCLENBQUEsRUFBQTtnQkFDekIsSUFBSSxDQUFDLFFBQVM7WUFDZCxDQUFBO1FBQ0gsQ0FBQTtNQUNSO0dBQ0g7QUFDSCxDQUFDLENBQUMsQ0FBQztBQUNIOztBQUVBLElBQUksZ0NBQWdDLDBCQUFBO0NBQ25DLGVBQWUsRUFBRSxVQUFVLENBQUM7QUFDN0IsRUFBRSxJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQzs7RUFFZixPQUFPO0dBQ04sTUFBTSxFQUFFLEtBQUs7R0FDYjtFQUNEO0dBQ0MsV0FBVyxFQUFFLFNBQVMsSUFBSSxDQUFDLENBQUM7SUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJO0lBQ2hCO0NBQ0gsTUFBTSxFQUFFLFVBQVUsQ0FBQztBQUNwQixFQUFFLElBQUksS0FBSyxFQUFFLEVBQUUsQ0FBQzs7QUFFaEIsRUFBRSxJQUFJLElBQUksR0FBRyxFQUFFLENBQUM7O0VBRWQsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO0tBQ3hDLElBQUksQ0FBQyxJQUFJO01BQ1Isb0JBQUEsSUFBRyxFQUFBLENBQUEsQ0FBQyxHQUFBLEVBQUcsQ0FBRSxDQUFHLENBQUEsRUFBQTtPQUNYLG9CQUFBLElBQUcsRUFBQSxJQUFDLEVBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBbUIsQ0FBQSxFQUFBO0tBQ3ZFLG9CQUFBLElBQUcsRUFBQSxJQUFDLEVBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBa0IsQ0FBQSxFQUFBO0tBQ2xFLG9CQUFBLElBQUcsRUFBQSxJQUFDLEVBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEdBQUcsS0FBVyxDQUFBLEVBQUE7S0FDeEMsb0JBQUEsSUFBRyxFQUFBLElBQUMsRUFBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQWdCLENBQUEsRUFBQTtLQUNsQyxvQkFBQSxJQUFHLEVBQUEsSUFBQyxFQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQWlCLENBQUE7SUFDeEMsQ0FBQTtNQUNILENBQUM7QUFDUCxLQUFLOztFQUVILEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7R0FDcEIsS0FBSztJQUNKLG9CQUFBLE9BQU0sRUFBQSxDQUFBLENBQUMsU0FBQSxFQUFTLENBQUMsbUJBQW9CLENBQUEsRUFBQTtLQUNwQyxvQkFBQSxPQUFNLEVBQUEsSUFBQyxFQUFBO01BQ04sb0JBQUEsSUFBRyxFQUFBLElBQUMsRUFBQTtRQUNGLG9CQUFBLElBQUcsRUFBQSxJQUFDLEVBQUEsV0FBYyxDQUFBLEVBQUE7UUFDbEIsb0JBQUEsSUFBRyxFQUFBLElBQUMsRUFBQSxhQUFnQixDQUFBLEVBQUE7UUFDcEIsb0JBQUEsSUFBRyxFQUFBLElBQUMsRUFBQSxnQkFBbUIsQ0FBQSxFQUFBO1FBQ3ZCLG9CQUFBLElBQUcsRUFBQSxJQUFDLEVBQUEsYUFBZ0IsQ0FBQSxFQUFBO0FBQzVCLFFBQVEsb0JBQUEsSUFBRyxFQUFBLElBQUMsRUFBQSxPQUFVLENBQUE7O01BRVgsQ0FBQTtLQUNFLENBQUEsRUFBQTtLQUNSLG9CQUFBLE9BQU0sRUFBQSxJQUFDLEVBQUE7T0FDSixJQUFLO0tBQ0EsQ0FBQTtJQUNELENBQUE7SUFDUixDQUFDO0FBQ0wsR0FBRztBQUNIOztFQUVFO0dBQ0Msb0JBQUEsS0FBSSxFQUFBLElBQUMsRUFBQTtJQUNILEtBQU07R0FDRixDQUFBO0dBQ047RUFDRDtBQUNGLENBQUMsQ0FBQztBQUNGOztBQUVBLElBQUksbUNBQW1DLDZCQUFBO0NBQ3RDLGVBQWUsRUFBRSxVQUFVLENBQUM7RUFDM0IsSUFBSSxDQUFDLGdCQUFnQixHQUFHO0dBQ3ZCLFFBQVEsRUFBRSxjQUFjO0dBQ3hCLFdBQVcsRUFBRSxlQUFlO0FBQy9CLEdBQUcsQ0FBQzs7RUFFRixJQUFJLENBQUMscUJBQXFCLEdBQUc7R0FDNUIsUUFBUSxFQUFFLGNBQWM7R0FDeEIsV0FBVyxFQUFFLG9CQUFvQjtBQUNwQyxHQUFHLENBQUM7O0VBRUYsT0FBTyxJQUFJLENBQUM7QUFDZCxFQUFFOztDQUVELFdBQVcsRUFBRSxVQUFVLENBQUM7RUFDdkIsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDO0VBQ2hCLENBQUMsQ0FBQyxJQUFJLENBQUM7TUFDSCxHQUFHLEVBQUUsbUJBQW1CO01BQ3hCLElBQUksRUFBRTtPQUNMLFVBQVUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsWUFBWTtPQUNqRCxhQUFhLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLFlBQVk7T0FDekQ7TUFDRCxPQUFPLEVBQUUsU0FBUyxJQUFJLENBQUMsQ0FBQztBQUM5QixPQUFPLElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7O09BRTdCLEdBQUcsSUFBSSxDQUFDO1FBQ1AsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQztTQUM5QixNQUFNLEVBQUUsSUFBSTtTQUNaLENBQUMsQ0FBQztRQUNIO09BQ0Q7TUFDRCxDQUFDLENBQUM7QUFDUixFQUFFOztDQUVELE1BQU0sRUFBRSxVQUFVLENBQUM7RUFDbEI7R0FDQyxvQkFBQSxNQUFLLEVBQUEsSUFBQyxFQUFBO0lBQ0wsb0JBQUMsUUFBUSxFQUFBLENBQUEsQ0FBQyxHQUFBLEVBQUcsQ0FBQyxHQUFBLEVBQUcsQ0FBQyxHQUFBLEVBQUcsQ0FBQyxVQUFBLEVBQVUsQ0FBQyxJQUFBLEVBQUksQ0FBRSxJQUFJLENBQUMsZ0JBQWlCLENBQUUsQ0FBQSxFQUFBO0lBQy9ELG9CQUFDLFFBQVEsRUFBQSxDQUFBLENBQUMsR0FBQSxFQUFHLENBQUMsR0FBQSxFQUFHLENBQUMsR0FBQSxFQUFHLENBQUMsZUFBQSxFQUFlLENBQUMsSUFBQSxFQUFJLENBQUUsSUFBSSxDQUFDLHFCQUFzQixDQUFFLENBQUEsRUFBQTthQUNoRSxvQkFBQSxRQUFPLEVBQUEsQ0FBQSxDQUFDLFNBQUEsRUFBUyxDQUFDLGlCQUFBLEVBQWlCLENBQUMsT0FBQSxFQUFPLENBQUUsSUFBSSxDQUFDLFdBQVcsRUFBQyxDQUFDLElBQUEsRUFBSSxDQUFDLFFBQVMsQ0FBQSxFQUFBLFFBQWUsQ0FBQSxFQUFBO2FBQzVGLG9CQUFDLFVBQVUsRUFBQSxDQUFBLENBQUMsR0FBQSxFQUFHLENBQUMsYUFBYSxDQUFFLENBQUE7R0FDbEMsQ0FBQTtHQUNQO0VBQ0Q7QUFDRixDQUFDLENBQUMsQ0FBQzs7QUFFSCxRQUFRLENBQUMsTUFBTTtFQUNiLG9CQUFDLGFBQWEsRUFBQSxJQUFFLENBQUE7RUFDaEIsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUNqQiIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIvLyBEZWZpbmUgTmFtZXNwYWNlXG4oZnVuY3Rpb24oKSB7XG4gICB3aW5kb3cuYXBwID0ge307XG59KS5jYWxsKHRoaXMpO1xuXG5cbihmdW5jdGlvbigpIHtcbiAgICBhcHAudXRpbCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiaGVsbG9cIilcbiAgICB9XG59KShhcHApO1xuXG52YXIgRHJvcGRvd24gPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24oKSB7XG4gIFx0dGhpcy5jaXR5TGlzdCA9IFtdO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGNpdGllcyA6ICcnLFxuICAgICAgc2VsZWN0ZWRDaXR5OiB0aGlzLnByb3BzLmRhdGEuZGVmYXVsdFRleHRcbiAgICB9O1xuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbigpIHtcbiAgXHR2YXIgc2VsZiA9IHRoaXM7IFxuICAgICQuYWpheCh7XG4gICAgXHR1cmw6IHNlbGYucHJvcHMuZGF0YS5mZXRjaFVybCxcbiAgICBcdHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpe1xuICAgIFx0XHRzZWxmLnNldFN0YXRlKHtcbiAgICBcdFx0XHRjaXRpZXM6IGRhdGFcbiAgICBcdFx0fSk7XG4gICAgXHR9XG4gICAgfSk7XG4gIH0sXG5cbiAgY2l0eVNlbGVjdGlvbkhhbmRsZXI6IGZ1bmN0aW9uKGUpe1xuICBcdHZhciBzZWxlY3RlZFRleHQgPSAkKGUudGFyZ2V0KS50ZXh0KCk7XG4gIFx0dGhpcy5zZXRTdGF0ZSh7XG4gIFx0XHRzZWxlY3RlZENpdHk6IHNlbGVjdGVkVGV4dFxuICBcdH0pO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gIFx0aWYoIXRoaXMuY2l0eUxpc3QubGVuZ3RoKXtcblx0XHRmb3IodmFyIGkgPSAwOyAgaSA8IHRoaXMuc3RhdGUuY2l0aWVzLmxlbmd0aDsgaSsrICl7XG4gIFx0XHRcdHRoaXMuY2l0eUxpc3QucHVzaCg8bGkga2V5PXtpfSBvbkNsaWNrPXt0aGlzLmNpdHlTZWxlY3Rpb25IYW5kbGVyfT48YSBocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApXCI+e3RoaXMuc3RhdGUuY2l0aWVzW2ldfTwvYT48L2xpPik7XG5cdCAgXHR9XG4gIFx0fVxuICBcdFxuICAgIHJldHVybiAoXG4gICAgXHQ8ZGl2IGNsYXNzTmFtZT1cImRyb3Bkb3duXCI+XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0biBidG4tZGVmYXVsdCBkcm9wZG93bi10b2dnbGVcIiB0eXBlPVwiYnV0dG9uXCIgaWQ9XCJkcm9wZG93bk1lbnUxXCIgZGF0YS10b2dnbGU9XCJkcm9wZG93blwiPlxuICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLnNlbGVjdGVkQ2l0eX1cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJjYXJldFwiPjwvc3Bhbj5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cImRyb3Bkb3duLW1lbnVcIj5cbiAgICAgICAgICAgICAgICB7dGhpcy5jaXR5TGlzdH1cbiAgICAgICAgICAgIDwvdWw+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn0pO1xuXG5cbnZhciBGbGlnaHREYXRhID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuXHRnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uKCl7XG5cdFx0dGhpcy5kYXRhID0ge307XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0aXNEYXRhOiBmYWxzZVxuXHRcdH1cblx0fSxcbiAgXHR1cGRhdGVUYWJsZTogZnVuY3Rpb24oZGF0YSl7XG4gIFx0XHR0aGlzLmRhdGEgPSBkYXRhXG4gIFx0fSxcblx0cmVuZGVyOiBmdW5jdGlvbigpe1xuXHRcdHZhciB0YWJsZSA9Jyc7IFxuXG5cdFx0dmFyIHJvd3MgPSBbXTtcblxuXHRcdGZvcih2YXIgaSA9IDA7ICBpIDwgdGhpcy5kYXRhLmxlbmd0aDsgaSsrICl7XG4gIFx0XHRcdHJvd3MucHVzaChcbiAgXHRcdFx0XHQ8dHIga2V5PXtpfT5cblx0ICBcdFx0XHRcdDx0ZD57dGhpcy5kYXRhW2ldLm9yaWdpbkNpdHkgKyBcIi1cIiArIHRoaXMuZGF0YVtpXS5kZXBhcnR1cmVDaXR5fTwvdGQ+XG5cdFx0XHRcdFx0PHRkPnt0aGlzLmRhdGFbaV0ucHJvdmlkZXIgKyBcIiBcIiArIHRoaXMuZGF0YVtpXS5mbGlnaHROdW1iZXJ9PC90ZD5cblx0XHRcdFx0XHQ8dGQ+e3RoaXMuZGF0YVtpXS5kdXJhdGlvbiArIFwiIGhyXCJ9PC90ZD5cblx0XHRcdFx0XHQ8dGQ+e3RoaXMuZGF0YVtpXS5vcmlnaW5UaW1lfTwvdGQ+XG5cdFx0XHRcdFx0PHRkPntcIlJzLiBcIiArIHRoaXMuZGF0YVtpXS50aWNrZXRQcmljZX08L3RkPlxuXHRcdFx0XHQ8L3RyPlxuICBcdFx0XHQpO1xuXHQgIFx0fVxuXG5cdFx0aWYodGhpcy5zdGF0ZS5pc0RhdGEpe1xuXHRcdFx0dGFibGUgPSAoXG5cdFx0XHRcdDx0YWJsZSBjbGFzc05hbWU9XCJ0YWJsZSB0YWJsZS1ob3ZlclwiPlxuXHRcdFx0XHRcdDx0aGVhZD5cblx0XHRcdFx0XHRcdDx0cj5cblx0XHRcdFx0XHQgXHRcdDx0aD5Gcm9tIC0gVG88L3RoPlxuXHRcdFx0XHRcdCBcdFx0PHRoPkZsaWdodCBOYW1lPC90aD5cblx0XHRcdFx0XHQgXHRcdDx0aD5EdXJhdGlvbiAoaHJzKTwvdGg+XG5cdFx0XHRcdFx0IFx0XHQ8dGg+T3JpZ2luIFRpbWU8L3RoPlxuXHRcdFx0XHRcdCBcdFx0PHRoPlByaWNlPC90aD5cblxuXHRcdFx0XHRcdFx0PC90cj5cblx0XHRcdFx0XHQ8L3RoZWFkPlxuXHRcdFx0XHRcdDx0Ym9keT5cblx0XHRcdFx0XHRcdFx0e3Jvd3N9XG5cdFx0XHRcdFx0PC90Ym9keT5cblx0XHRcdFx0PC90YWJsZT5cblx0XHRcdCk7XG5cdFx0fVxuXG5cblx0XHRyZXR1cm4gKCBcblx0XHRcdDxkaXY+XG5cdFx0XHRcdHt0YWJsZX1cblx0XHRcdDwvZGl2PlxuXHRcdClcblx0fVxufSlcblxuXG52YXIgQm9va2luZ1dpbmRvdyA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcblx0Z2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbigpe1xuXHRcdHRoaXMub3JpZ2luQ2l0eU9wdGlvbiA9IHtcblx0XHRcdGZldGNoVXJsOiBcIi9nZXRDaXR5TGlzdFwiLFxuXHRcdFx0ZGVmYXVsdFRleHQ6IFwiY2hvb3NlIG9yaWdpblwiXG5cdFx0fTtcblxuXHRcdHRoaXMuZGVzdGluYXRpb25DaXR5T3B0aW9uID0ge1xuXHRcdFx0ZmV0Y2hVcmw6IFwiL2dldENpdHlMaXN0XCIsXG5cdFx0XHRkZWZhdWx0VGV4dDogXCJjaG9vc2UgZGVzdGluYXRpb25cIlxuXHRcdH07XG5cblx0XHRyZXR1cm4gbnVsbDtcblx0fSxcblxuXHRmZXRjaEZsaWdodDogZnVuY3Rpb24oKXtcblx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFx0JC5hamF4KHtcbiAgICBcdFx0dXJsOiAnL2dldEZsaWdodERldGFpbHMnLFxuICAgIFx0XHRkYXRhOiB7XG4gICAgXHRcdFx0b3JpZ2luQ2l0eTogdGhpcy5yZWZzLm9yaWdpbkRELnN0YXRlLnNlbGVjdGVkQ2l0eSxcbiAgICBcdFx0XHRkZXBhcnR1cmVDaXR5OiB0aGlzLnJlZnMuZGVzdGluYXRpb25ERC5zdGF0ZS5zZWxlY3RlZENpdHlcbiAgICBcdFx0fSxcbiAgICBcdFx0c3VjY2VzczogZnVuY3Rpb24oZGF0YSl7XG5cdCAgICBcdFx0dmFyIGRhdGEgPSAkLnBhcnNlSlNPTihkYXRhKTtcblxuXHQgICAgXHRcdGlmKGRhdGEpe1xuXHRcdCAgICBcdFx0c2VsZi5yZWZzLmZsaWdodFRhYmxlLnVwZGF0ZVRhYmxlKGRhdGEpO1xuXHRcdCAgICBcdFx0c2VsZi5yZWZzLmZsaWdodFRhYmxlLnNldFN0YXRlKHtcblx0ICAgIFx0XHRcdFx0aXNEYXRhOiB0cnVlXG5cdFx0ICAgIFx0XHR9KTtcblx0ICAgIFx0XHR9XG5cdCAgICBcdH1cblx0ICAgIH0pO1xuXHR9LFxuXHRcblx0cmVuZGVyOiBmdW5jdGlvbigpe1xuXHRcdHJldHVybiAoXG5cdFx0XHQ8c3Bhbj5cblx0XHRcdFx0PERyb3Bkb3duIGtleT1cIjBcIiByZWY9XCJvcmlnaW5ERFwiIGRhdGE9e3RoaXMub3JpZ2luQ2l0eU9wdGlvbn0vPlxuXHRcdFx0XHQ8RHJvcGRvd24ga2V5PVwiMVwiIHJlZj1cImRlc3RpbmF0aW9uRERcIiBkYXRhPXt0aGlzLmRlc3RpbmF0aW9uQ2l0eU9wdGlvbn0vPlxuXHQgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0biBidG4tcHJpbWFyeVwiIG9uQ2xpY2s9e3RoaXMuZmV0Y2hGbGlnaHR9IHR5cGU9XCJidXR0b25cIj5TdWJtaXQ8L2J1dHRvbj5cblx0ICAgICAgICAgICAgPEZsaWdodERhdGEgcmVmPVwiZmxpZ2h0VGFibGVcIi8+XG5cdFx0XHQ8L3NwYW4+XG5cdFx0KVxuXHR9XG59KTtcblxuUmVhY3RET00ucmVuZGVyKFxuICA8Qm9va2luZ1dpbmRvdy8+LFxuICAkKCcjd3JhcHBlcicpWzBdXG4pOyJdfQ==
