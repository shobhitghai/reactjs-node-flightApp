(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Define Namespace
(function() {
   window.app = {};
}).call(this);


(function() {
    app.util = function(){
        console.log("hello")
    }
})(app);

var Dropdown = React.createClass({displayName: "Dropdown",
  getInitialState: function() {
  	this.cityList = [];

    return {
      cities : '',
      selectedCity: this.props.data.defaultText
    };
  },

  componentDidMount: function() {
  	var self = this; 
    $.ajax({
    	url: self.props.data.fetchUrl,
    	success: function(data){
    		self.setState({
    			cities: data
    		});
    	}
    });
  },

  citySelectionHandler: function(e){
  	var selectedText = $(e.target).text();
  	this.setState({
  		selectedCity: selectedText
  	});
  },

  render: function() {
  	if(!this.cityList.length){
		for(var i = 0;  i < this.state.cities.length; i++ ){
  			this.cityList.push(React.createElement("li", {key: i, onClick: this.citySelectionHandler}, React.createElement("a", {href: "javascript:void(0)"}, this.state.cities[i])));
	  	}
  	}
  	
    return (
    	React.createElement("div", {className: "dropdown"}, 
            React.createElement("button", {className: "btn btn-default dropdown-toggle", type: "button", id: "dropdownMenu1", "data-toggle": "dropdown"}, 
                this.state.selectedCity, 
                React.createElement("span", {className: "caret"})
            ), 
            React.createElement("ul", {className: "dropdown-menu"}, 
                this.cityList
            )
        )
    );
  }
});

var ProviderChkBox = React.createClass({displayName: "ProviderChkBox",
	getInitialState: function(){
		return {
			checked: false
		};
	},
	checkBoxSelection: function(e){
		this.props.updateFilter(e);
		this.setState({checked: !this.state.checked});
	},
	componentWillReceiveProps: function(){
		//use this for setting data before render is called after initial mouning
		this.setState({
			checked: false
		});
	},
	render: function(){
		return (
			React.createElement("input", {type: "checkbox", checked: this.state.checked ? 'checked': null, onChange: this.checkBoxSelection, value: this.props.value})
		)
	}
});

var FilterPanel = React.createClass({displayName: "FilterPanel",
	getInitialState: function(){
		this.filterSelectedProvider = [];
		this.flightProviderArr = [];

		return null;
	},
	handleFilterPanelSelection: function(e){
		if(e.target.checked){
			this.filterSelectedProvider.push(e.target.value);
		}else{
			this.filterSelectedProvider.splice(this.filterSelectedProvider.indexOf(e.target.value), 1);

			if(!this.filterSelectedProvider.length){
				this.filterSelectedProvider = this.flightProviderArr;

				this.props.filterHandler({
					provider: this.filterSelectedProvider
				});

				this.filterSelectedProvider = []

				return false;
			}
		};

		this.props.filterHandler({
			provider: this.filterSelectedProvider
		});

		console.log(this.filterSelectedProvider);
	},
	render: function(){
		this.flightProviderArr = [];
		var providerChkGroup = [];
		this.filterSelectedProvider = [];

		for (var i = this.props.flightProviders.length - 1; i >= 0; i--) {
			if(this.flightProviderArr.indexOf(this.props.flightProviders[i]) === -1){
				this.flightProviderArr.push(this.props.flightProviders[i]);
			}
		};

		for (var i = this.flightProviderArr.length - 1; i >= 0; i--) {
			providerChkGroup.push(
				React.createElement("div", {key: i, className: "checkbox"}, 
	  				React.createElement("label", null, 
	    				React.createElement(ProviderChkBox, {key: i, value: this.flightProviderArr[i], updateFilter: this.handleFilterPanelSelection}), 
	    					this.flightProviderArr[i]
	  					)
				)
			);
		};

		return (
			React.createElement("div", null, 
				providerChkGroup
			)
		)
	}
})


var FlightTable = React.createClass({displayName: "FlightTable",
	getInitialState: function(){
		return {
			refreshTable: false
		};
	},
	updateTable: function(data){
		this.updatedData = data;
	},
	render: function(){
		var rows = [];

		if(this.updatedData){
			this.data = this.updatedData;
		}else{
			this.data = this.props.data;
		}

		for(var i = 0;  i < this.data.length; i++ ){
  			rows.push(
  				React.createElement("tr", {key: i}, 
	  				React.createElement("td", null, this.data[i].originCity + "-" + this.data[i].departureCity), 
					React.createElement("td", null, this.data[i].provider + " " + this.data[i].flightNumber), 
					React.createElement("td", null, this.data[i].duration + " hr"), 
					React.createElement("td", null, this.data[i].originTime), 
					React.createElement("td", null, "Rs. " + this.data[i].ticketPrice)
				)
  			);
	  	}

	  	this.updatedData = null;

		return (
			React.createElement("table", {className: "table table-hover"}, 
				React.createElement("thead", null, 
					React.createElement("tr", null, 
				 		React.createElement("th", null, "From - To"), 
				 		React.createElement("th", null, "Flight Name"), 
				 		React.createElement("th", null, "Duration (hrs)"), 
				 		React.createElement("th", null, "Origin Time"), 
				 		React.createElement("th", null, "Price")

					)
				), 
				React.createElement("tbody", null, 
						rows
				)
			)
		)
	}
})

var FlightData = React.createClass({displayName: "FlightData",
	getInitialState: function(){
		this.data = {};

		return {
			isData: false
		}
	},
  	updateData: function(data){
  		this.data = data;
  	},
  	filterTable: function(options){
  		console.log(options);

  		var newData = this.data.filter(function(i){
			return options.provider.indexOf(i.provider) !== -1;
		})
  		this.refs.table.updateTable(newData);
  		this.refs.table.setState({
  			refreshTable: true
  		});
  	},

	render: function(){
		var flightProviders = [];
		var panel;

		for(var i = 0;  i < this.data.length; i++ ){
			flightProviders.push(this.data[i].provider);
	  	}

		if(this.state.isData){
			
			panel = (
					React.createElement("div", null, 
						React.createElement(FilterPanel, {ref: "panel", flightProviders: flightProviders, filterHandler: this.filterTable}), 
						React.createElement(FlightTable, {ref: "table", data: this.data})
					)
			)
		}

		return ( 
			React.createElement("div", null, 
				panel
			)
		)
	}
})


var BookingWindow = React.createClass({displayName: "BookingWindow",
	getInitialState: function(){
		this.originCityOption = {
			fetchUrl: "/getCityList",
			defaultText: "choose origin"
		};

		this.destinationCityOption = {
			fetchUrl: "/getCityList",
			defaultText: "choose destination"
		};

		return null;
	},

	fetchFlight: function(){
		var self = this;
		$.ajax({
    		url: '/getFlightDetails',
    		data: {
    			originCity: this.refs.originDD.state.selectedCity,
    			departureCity: this.refs.destinationDD.state.selectedCity
    		},
    		success: function(data){
	    		var data = $.parseJSON(data);

	    		if(data){
		    		self.refs.flightData.updateData(data);
		    		self.refs.flightData.setState({
	    				isData: true
		    		});
	    		}
	    	}
	    });
	},
	
	render: function(){
		return (
			React.createElement("span", null, 
				React.createElement(Dropdown, {key: "0", ref: "originDD", data: this.originCityOption}), 
				React.createElement(Dropdown, {key: "1", ref: "destinationDD", data: this.destinationCityOption}), 
	            React.createElement("button", {className: "btn btn-primary", onClick: this.fetchFlight, type: "button"}, "Submit"), 
	            React.createElement(FlightData, {ref: "flightData"})
			)
		)
	}
});

ReactDOM.render(
  React.createElement(BookingWindow, null),
  $('#wrapper')[0]
);

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
